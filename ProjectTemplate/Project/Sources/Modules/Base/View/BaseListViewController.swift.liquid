//
//  BaseListViewController.swift
//  {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import SQExtensions
import SQCompositionLists

class BaseListViewController: BaseViewController,
                              UICollectionViewDelegate,
                              SQListViewProtocol {
// MARK: - Properties
    internal var bottomInset: CGFloat = .zero
    var sections = [SQSection]()

// MARK: - UI
    internal lazy var collectionView: UICollectionView! = {
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewLayout())
        collectionView.delegate = self
        return collectionView
    }()

// MARK: - Life cycle
    override func loadView() {
        super.loadView()

        self.collectionView.collectionViewLayout = self.createCollectionViewLayout()
        self.setupCollectionView()
        self.setupFabric()
    }

// MARK: - Configure collection
    internal func createCollectionViewLayout() -> UICollectionViewLayout {
        fatalError("You must override this method")
    }

    internal func setupCollectionView() {

    }

    internal func setupFabric() {
        fatalError("You must override this method")
    }

// MARK: - Reload Data
    func reloadData(
        withSectionsContent content: [SQSectionContent],
        animated: Bool,
        completion: (() -> Void)?
    ) {
        var newSnapshot = NSDiffableDataSourceSnapshot<SQSection, AnyHashable>()

        self.sections = content.map { SQSection($0) }
        self.sections.forEach { section in
            newSnapshot.appendSections([section])
            newSnapshot.appendItems(section.content.items)
        }

        var contentOffsetY: CGFloat = .zero
        if !animated {
            UIView.setAnimationsEnabled(false)
            contentOffsetY = self.collectionView.contentOffset.y
        }

        self.dataSource.apply(
            newSnapshot,
            animatingDifferences: animated,
            completion: {
                if animated {
                    completion?()
                    return
                }

                self.collectionView.contentOffset.y = contentOffsetY
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    UIView.setAnimationsEnabled(true)
                }
                completion?()
            }
        )
    }

// MARK: - Keyboard
    override func handleKeyboard(
        withFrame frame: CGRect,
        animationDuration: TimeInterval,
        animationOptions: UIView.AnimationOptions,
        isShow: Bool
    ) {
        super.handleKeyboard(
            withFrame: frame,
            animationDuration: animationDuration,
            animationOptions: animationOptions,
            isShow: isShow
        )

        UIView.animate(
            withDuration: animationDuration,
            delay: .zero,
            options: [animationOptions],
            animations: {
                self.processKeyboardVisibility(isShow, keyboardFrame: frame)
            }
        )
    }

    internal func processKeyboardVisibility(_ isVisible: Bool, keyboardFrame: CGRect) {
        var inset = self.collectionView.contentInset
        inset.bottom = isVisible ? keyboardFrame.height : UIWindow.sq.safeAreaBottom
        self.collectionView.contentInset = inset
    }

// MARK: - UICollectionViewDelegate
    func collectionView(
        _ collectionView: UICollectionView,
        didSelectItemAt indexPath: IndexPath
    ) {
        collectionView.deselectItem(
            at: indexPath,
            animated: true
        )
    }

// MARK: - UIScrollViewDelegate
    func scrollViewDidScroll(_ scrollView: UIScrollView) {}
}
