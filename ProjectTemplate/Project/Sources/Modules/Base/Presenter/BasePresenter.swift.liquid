//
//  BasePresenter.swift
//  {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import SQExtensions
import SQVUPER

// MARK: - BasePresenter
protocol BasePresenter: Presenter {

    @discardableResult
    func injectView(_ view: BaseView) -> Self

    @discardableResult
    func injectRouter(_ router: BaseRouter) -> Self

    func onCloseButtonClicked()
}

// MARK: - BasePresenterImpl
class BasePresenterImpl: BasePresenter {

// MARK: - VUPER
    internal weak var _internalView: BaseView?
    internal var _internalUseCases: BaseUseCases?
    internal var _internalRouter: BaseRouter?

// MARK: - Properties
    internal lazy var operationsQueue: OperationQueue = {
        let queue = OperationQueue()
        queue.underlyingQueue = .main
        return queue
    }()

// MARK: - Life Cycle
    func viewDidLoad() {}

    func viewWillAppear() {}

    func viewDidAppear() {}

    func viewWillDisappear() {}

    func viewDidDisappear() {}

    func viewDidUnload() {}

    func didReceiveMemoryWarning() {}

// MARK: - DI
    @discardableResult
    func injectView(_ view: BaseView) -> Self {
        self._internalView = view
        return self
    }

    @discardableResult
    func injectRouter(_ router: BaseRouter) -> Self {
        self._internalRouter = router
        return self
    }

    @discardableResult
    func injectUseCases(_ useCases: BaseUseCases) -> Self {
        self._internalUseCases = useCases
        return self
    }

// MARK: - Methods
    func onCloseButtonClicked() {
        self._internalRouter?.dismiss(animated: true)
    }
}
