//
//  NetworkError.swift
//  {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.

import Foundation
import SwiftyJSON

class NetworkError: Error {

    let code: String
    let message: String
    let json: JSON?

    var isCanceled: Bool {
        code == .canceledError
    }

    init(code: String, message: String, json: JSON? = nil) {
        self.code = code
        self.message = message
        self.json = json
    }
}

extension NetworkError: Equatable {
    
    static func == (lhs: NetworkError, rhs: NetworkError) -> Bool {
        lhs.code == rhs.code &&
            lhs.json == rhs.json
    }
}

// TODO: - Set messages for errors
extension NetworkError {

    static let noNetworkConnectionError = NetworkError(
        code: .noNetworkConnection,
        message: ""
    )

    static let slowNetworkConnectionError = NetworkError(
        code: .slowNetworkConnection,
        message: ""
    )

    static let unrecognizedResponse = NetworkError(
        code: .unrecognizedResponse,
        message: ""
    )

    static let unrecognizedError = NetworkError(
        code: .unrecognizedError,
        message: ""
    )

    static let canceledError = NetworkError(
        code: .canceledError,
        message: ""
    )
}
